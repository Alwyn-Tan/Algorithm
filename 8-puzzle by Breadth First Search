#include <iostream>
#include <queue>
using namespace std;
struct Matrix {
    int zero_position[2] = {1, 2};
    int state[3][3] = {
        {1, 2, 3}, {8 , 4 , 0}, {7, 6, 5}};
    
};

enum Action {
    UP,
    DOWN,
    LEFT,
    RIGHT
};
int goal[3][3] = {
    {1, 2, 3}, {8, 0, 4}, {7, 6, 5}};
bool move(Matrix *matrix, Action action)
{
    int x, y;
    x = matrix->zero_position[0];
    y = matrix->zero_position[1];
    switch (action) {
    case UP:
        if (x == 2 || x == 1) {
            return true;
        }
        break;
    case DOWN:
        if (x + 1 <= 2) {
            return true;
        }
        break;
    case LEFT:
        if (y - 1 >= 0) {
            return true;
        }
        break;
    case RIGHT:
        if (y + 1 <= 2) {
            return true;
        }
        break;
    default:
        break;
    }
    return false;
}
bool compare(int a[3][3], int b[3][3])
{
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (a[i][j] != b[i][j]) {
                return false;
            }
        }
    }
    return true;
}
void printMatrix(int a[3][3])
{
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            cout << a[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
void swap(int &a, int &b)
{
    int temp = a;
    a = b;
    b = temp;
}
void copy(int (&a)[3][3], int (&b)[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            a[i][j] = b[i][j];
        }
    }
}
int main()
{
    Matrix *start = new Matrix();
    cout << "Initial State:" << endl;
    printMatrix(start->state);
    queue<Matrix *> Q;
    Q.push(start);
    if (compare(goal, start->state)) {
        cout << "Problem Solved!";
        return 0;
    }
    while (!Q.empty()) {
        Matrix *pop = Q.front();
        Q.pop();
  
        if (move(pop, UP)) {
            Matrix* child = new Matrix;
            copy(child->state, pop->state);
            child->zero_position[0] = pop->zero_position[0];
            child->zero_position[1] = pop->zero_position[1];
            swap(child->state[child->zero_position[0]][child->zero_position[1]], child->state[child->zero_position[0] - 1][child->zero_position[1]]);
            child->zero_position[0]--;
            Q.push(child);
            cout << " UP" << endl;
            printMatrix(child->state);
            if (compare(goal, child->state)) {
                cout << "Problem Solved!";
                return 0;
            }
        }
        if (move(pop, DOWN)) {
            Matrix* child = new Matrix;
            copy(child->state, pop->state);
            child->zero_position[0] = pop->zero_position[0];
            child->zero_position[1] = pop->zero_position[1];
            swap(child->state[child->zero_position[0]][child->zero_position[1]], child->state[child->zero_position[0] + 1][child->zero_position[1]]);
            child->zero_position[0]++;
            Q.push(child);
            cout << " DOWN" << endl;
            printMatrix(child->state);
            if (compare(goal, child->state)) {
                cout << "Problem Solved!";
                return 0;
            }
        }
        if (move(pop, LEFT)) {
            Matrix* child = new Matrix;
            copy(child->state, pop->state);
            child->zero_position[0] = pop->zero_position[0];
            child->zero_position[1] = pop->zero_position[1];
            swap(child->state[child->zero_position[0]][child->zero_position[1]], child->state[child->zero_position[0]][child->zero_position[1]-1]);
            child->zero_position[1]--;
            Q.push(child);
            cout << " LEFT" << endl;
            printMatrix(child->state);
            if (compare(goal, child->state)) {
                cout << "Problem Solved!";
                return 0;
            }
        }
        if (move(pop, RIGHT)) {
            Matrix* child = new Matrix;
            copy(child->state, pop->state);
            child->zero_position[0] = pop->zero_position[0];
            child->zero_position[1] = pop->zero_position[1];
            swap(child->state[child->zero_position[0]][child->zero_position[1]], child->state[child->zero_position[0] ][child->zero_position[1]+1]);
            child->zero_position[1]++;
            Q.push(child);
            cout << " RIGHT" << endl;
            printMatrix(child->state);
            if (compare(goal, child->state)) {
                cout << "Problem Solved!";
                return 0;
            }
        }

    }
    return 0;
}
